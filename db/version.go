package db

import (
	"fmt"
	"strings"
)

type versionSanitizer func(string) string

var versionSanitizers = map[string]versionSanitizer{
	"citrix:application_delivery_controller":          replaceDashParser,
	"citrix:application_delivery_controller_firmware": replaceDashParser,
	"citrix:application_delivery_management":          replaceDashParser,
	"citrix:gateway":                                  replaceDashParser,
	"citrix:gateway_firmware":                         replaceDashParser,
	"citrix:netscaler_gateway":                        replaceDashParser,
	"citrix:netscaler_gateway_firmware":               replaceDashParser,
}

func sanitizeVersion(vendor, product, version string) string {
	if versionSanitizer, ok := versionSanitizers[fmt.Sprintf("%s:%s", vendor, product)]; ok {
		return versionSanitizer(version)
	}

	return version
}

// replaceDashParser replaces dashes with dots
//
// The dash is interpreted as a pre-release separator in the hashicorp library,
// and a version constraint without a pre-release can never match a version with
// a pre-release. This means v15.1-rc1 does not match the constraint ">= v15", for
// example.
//
// This parser should be used when the dash in the version number is not a
// pre-release separator, and is equivalent to a dot separator. This is the case
// with Citrix version numbers e.g. 11.1-65.20 where 11.1 is the release
// version, and 65.20 is the build version.
func replaceDashParser(v string) string {
	return strings.Replace(v, "-", ".", 1)
}
