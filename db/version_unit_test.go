package db

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_NewVersion(t *testing.T) {
	t.Parallel()

	testCases := map[string]struct {
		inputVendor   string
		inputProduct  string
		inputVersion  string
		expected      string
		expectedError assert.ErrorAssertionFunc
	}{
		"it leaves compliant versions untouched": {
			inputVendor:   "unknown",
			inputProduct:  "unknown",
			inputVersion:  "1.1.1",
			expected:      "1.1.1",
			expectedError: assert.NoError,
		},
		"it rewrites an OpenSSL version with four segments": {
			inputVendor:   "openssl",
			inputProduct:  "openssl",
			inputVersion:  "0.9.8g",
			expected:      "0.9.8.7",
			expectedError: assert.NoError,
		},
		"it leaves a compliant OpenSSL version untouched": {
			inputVendor:   "openssl",
			inputProduct:  "openssl",
			inputVersion:  "0.9.8",
			expected:      "0.9.8.0",
			expectedError: assert.NoError,
		},
		"it rewrites a citrix version with a dot instead of a dash": {
			inputVendor:   "citrix",
			inputProduct:  "gateway",
			inputVersion:  "12.1-55.300",
			expected:      "12.1.55.300",
			expectedError: assert.NoError,
		},
	}

	for name, tc := range testCases {
		tc := tc
		t.Run(name, func(t *testing.T) {
			t.Parallel()

			rewritten, err := RewriteVersion(tc.inputVendor, tc.inputProduct, tc.inputVersion)
			tc.expectedError(t, err)
			assert.Equal(t, tc.expected, rewritten)
		})
	}
}
