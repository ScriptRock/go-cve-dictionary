package db

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestRpmVersioEqual(t *testing.T) {
	t.Parallel()
	for name, tc := range map[string]struct {
		with                rpmVersion
		give                rpmVersion
		expected            bool
		expectedErrContains string
	}{
		"1:abc-def_and_1:abc-def": {
			with:     newRpmVersion("1:abc-def"),
			give:     newRpmVersion("1:abc-def"),
			expected: true,
		},
		"1:abc-def_and_1:abc": {
			with:     newRpmVersion("1:abc-def"),
			give:     newRpmVersion("1:abc"),
			expected: false,
		},
		"1:abc-def_and_1": {
			with:     newRpmVersion("1:abc-def"),
			give:     newRpmVersion("1"),
			expected: false,
		},
		"abc-def_and_abc-def": {
			with:     newRpmVersion("abc-1def"),
			give:     newRpmVersion("abc-1def"),
			expected: true,
		},
		"abc_and_abc": {
			with:     newRpmVersion("abc"),
			give:     newRpmVersion("abc"),
			expected: true,
		},
	} {
		tc := tc

		t.Run(name, func(t *testing.T) {
			t.Parallel()

			actual, err := tc.with.Equal(tc.give)

			assert.Equal(t, tc.expected, actual, fmt.Sprintf("%s = %s", tc.with.wrapped.String(), tc.give.wrapped.String()))

			if tc.expectedErrContains != "" {
				assert.ErrorContains(t, err, tc.expectedErrContains)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

func TestRpmVersioLessThan(t *testing.T) {
	t.Parallel()
	for name, tc := range map[string]struct {
		with                rpmVersion
		give                rpmVersion
		expected            bool
		expectedErrContains string
	}{
		"eq_epoch_version_release": {
			with:     newRpmVersion("1:abc-def"),
			give:     newRpmVersion("1:abc-def"),
			expected: false,
		},
		"eq_epoch_version_no_release": {
			with:                newRpmVersion("1:abc-def"),
			give:                newRpmVersion("1:abc"),
			expectedErrContains: "segment length mistmatch between [def] & []",
		},
		"no_epoch_eq_version_release": {
			with:     newRpmVersion("abc-def"),
			give:     newRpmVersion("abc-def"),
			expected: false,
		},
		"epoch_lt": {
			with:     newRpmVersion("1:def"),
			give:     newRpmVersion("2:abc"),
			expected: true,
		},
		"epoch_gt": {
			with:     newRpmVersion("2:abc"),
			give:     newRpmVersion("1:def"),
			expected: false,
		},
		"version_alpha_lt": {
			with:     newRpmVersion("abc"),
			give:     newRpmVersion("def"),
			expected: true,
		},
		"version_alpha_gt": {
			with:     newRpmVersion("abc"),
			give:     newRpmVersion("def"),
			expected: true,
		},
		"version_numeric_lt": {
			with:     newRpmVersion("1"),
			give:     newRpmVersion("2"),
			expected: true,
		},
		"version_numeric_gt": {
			with:     newRpmVersion("2"),
			give:     newRpmVersion("1"),
			expected: false,
		},
		"version_alphanumeric_lt": {
			with:     newRpmVersion("abc1"),
			give:     newRpmVersion("abc2"),
			expected: true,
		},
		"version_alphanumeric_gt": {
			with:     newRpmVersion("abc2"),
			give:     newRpmVersion("abc1"),
			expected: false,
		},
		"version_alphanumeric_lt1": {
			with:     newRpmVersion("aa2"),
			give:     newRpmVersion("ab1"),
			expected: true,
		},
		"version_alphanumeric_lt2": {
			with:     newRpmVersion("aa1"),
			give:     newRpmVersion("aa2"),
			expected: true,
		},
		"version_alphanumeric_lt3": {
			with:     newRpmVersion("aa12c"),
			give:     newRpmVersion("aa12d"),
			expected: true,
		},
		"version_alphanumeric_lt4": {
			with:     newRpmVersion("aa12c"),
			give:     newRpmVersion("aa12cc"),
			expected: true,
		},
		"version_alphanumeric_gt1": {
			with:     newRpmVersion("ac12"),
			give:     newRpmVersion("ab12"),
			expected: false,
		},
		"version_alphanumeric_gt2": {
			with:     newRpmVersion("ab21"),
			give:     newRpmVersion("ab12"),
			expected: false,
		},
		"version_alphanumeric_gt3": {
			with:     newRpmVersion("ab12c"),
			give:     newRpmVersion("ab12a"),
			expected: false,
		},
		"version_alphanumeric_gt4": {
			with:     newRpmVersion("ab12cc"),
			give:     newRpmVersion("ab12c"),
			expected: false,
		},
		"release_alpha_lt": {
			with:     newRpmVersion("abc123-def"),
			give:     newRpmVersion("abc123-eef"),
			expected: true,
		},
		"release_alpha_gt": {
			with:     newRpmVersion("abc123-eef"),
			give:     newRpmVersion("abc123-def"),
			expected: false,
		},
		"release_numeric_lt": {
			with:     newRpmVersion("abc123-1"),
			give:     newRpmVersion("abc123-2"),
			expected: true,
		},
		"release_numeric_gt": {
			with:     newRpmVersion("abc123-2"),
			give:     newRpmVersion("abc123-1"),
			expected: false,
		},
		"release_alphanumeric_lt1": {
			with:     newRpmVersion("abc123-aa2"),
			give:     newRpmVersion("abc123-ab1"),
			expected: true,
		},
		"release_alphanumeric_lt2": {
			with:     newRpmVersion("abc123-aa1"),
			give:     newRpmVersion("abc123-aa2"),
			expected: true,
		},
		"release_alphanumeric_lt3": {
			with:     newRpmVersion("abc123-aa12c"),
			give:     newRpmVersion("abc123-aa12d"),
			expected: true,
		},
		"release_alphanumeric_lt4": {
			with:     newRpmVersion("abc123-aa12c"),
			give:     newRpmVersion("abc123-aa12cc"),
			expected: true,
		},
		"release_alphanumeric_gt1": {
			with:     newRpmVersion("abc123-ac12"),
			give:     newRpmVersion("abc123-ab12"),
			expected: false,
		},
		"release_alphanumeric_gt2": {
			with:     newRpmVersion("abc123-ab21"),
			give:     newRpmVersion("abc123-ab12"),
			expected: false,
		},
		"release_alphanumeric_gt3": {
			with:     newRpmVersion("abc123-ab12c"),
			give:     newRpmVersion("abc123-ab12a"),
			expected: false,
		},
		"release_alphanumeric_gt4": {
			with:     newRpmVersion("abc123-ab12cc"),
			give:     newRpmVersion("abc123-ab12c"),
			expected: false,
		},
		"version_segment_length_mismatch": {
			with:                newRpmVersion("a.a.a"),
			give:                newRpmVersion("a.a.b.b"),
			expectedErrContains: "segment length mistmatch between [a a a] & [a a b b]",
		},
		"version_segment_type_mismatch_left": {
			with:                newRpmVersion("a.a.1"),
			give:                newRpmVersion("a.a.a"),
			expectedErrContains: "segment a[2] (1) is a number but segment b[2] (a) is not",
		},
		"version_segment_type_mismatch_right": {
			with:                newRpmVersion("a.a.a"),
			give:                newRpmVersion("a.a.1"),
			expectedErrContains: "segment b[2] (a) is not a number but segment b[2] (1) is",
		},
		"version_segment_separator_mismatch_left": {
			with:                newRpmVersion("a.a_a"),
			give:                newRpmVersion("a.a.a"),
			expectedErrContains: "separator \"95\" appears in left, but not right",
		},
		"version_segment_separator_mismatch_right": {
			with:                newRpmVersion("a.a.a"),
			give:                newRpmVersion("a.a_a"),
			expectedErrContains: "separator \"95\" appears in right, but not left",
		},
	} {
		tc := tc

		t.Run(name, func(t *testing.T) {
			t.Parallel()

			actual, err := tc.with.LessThan(tc.give)

			assert.Equal(t, tc.expected, actual, fmt.Sprintf("%s < %s", tc.with.wrapped.String(), tc.give.wrapped.String()))

			if tc.expectedErrContains != "" {
				assert.ErrorContains(t, err, tc.expectedErrContains)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}
